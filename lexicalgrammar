// Lexical grammar for j--
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

// Whitespace -- ignored
" "|"\t"|"\n"|"\r"|"\f"

// Single line comment -- ignored
"//" {~("\n"|"\r")} ("\n"|"\r"["\n"])

// Reserved words
ABSTRACT    ::= "abstract"
BOOLEAN     ::= "boolean"
CHAR        ::= "char"
CLASS       ::= "class"
ELSE        ::= "else"
EXTENDS     ::= "extends"
FALSE       ::= "false"
IF          ::= "if"
IMPORT      ::= "import"
INSTANCEOF  ::= "instanceof"
INT         ::= "int"
NEW         ::= "new"
NULL        ::= "null"
PACKAGE     ::= "package"
PRIVATE     ::= "private"
PROTECTED   ::= "protected"
PUBLIC      ::= "public"
RETURN      ::= "return"
STATIC      ::= "static"
SUPER       ::= "super"
THIS        ::= "this"
TRUE        ::= "true"
VOID        ::= "void"
WHILE       ::= "while"

// Operators
ASSIGN      ::= "="
EQUAL       ::= "=="
GT          ::= ">"
GTE			::= ">="
INC         ::= "++"
LAND        ::= "&&"
LT 			::= "<"
LE          ::= "<="
LNOT        ::= "!"
MINUS       ::= "-"
PLUS        ::= "+"
PLUS_ASSIGN ::= "+="
MINUS_ASSIGN ::= "-="
MULT_ASSIGN ::= "*="
DIV_ASSIGN  ::= "/="
REM_ASSIGN  ::= "%="
SHIFT_RIGHT_ASSIGN ::= ">>="
SHIFT_LEFT_ASSIGN ::= "<<="
XOR_ASSIGN  ::= "^="
OR_ASSIGN   ::= "|="
ANDEQ       ::= "&="
STAR        ::= "*"
DIV         ::= "/"
REM         ::= "%"
SHIFT_LEFT  ::= "<<"
SHIFT_RIGHT ::= ">>"
SHIFT_RIGHT_UNSIGN ::= ">>>"
SHIFT_RIGHT_UNSIGN_ASSIGN ::= ">>>="
AND         ::= "&"
OR          ::= "|"
XOR         ::= "^"
UCOM		::= "~"
COND		::= "?"
NEQUAL		::= "!="
LOR         ::= "||"

// Separators
COMMA       ::= ","
DOT         ::= "."
LBRACK      ::= "["
LCURLY      ::= "{"
LPAREN      ::= "("
RBRACK      ::= "]"
RCURLY      ::= "}"
RPAREN      ::= ")"
SEMI        ::= ";"

// Identifiers
IDENTIFIER ::= ("a"-"z"|"A"-"Z"|"_"|"$") {"a"-"z"|"A"-"Z"|"_"|"0"-"9"|"$"}

// Literals
INT_LITERAL    ::= "0" | ("1"-"9") {"0"-"9"}
ESC            ::= "\\" ("n"|"r"|"t"|"b"|"f"|"'"|"\""|"\\")
STRING_LITERAL ::= "\"" {ESC | ~("\""|"\\"|"\n"|"\r")} "\""
CHAR_LITERAL   ::= "'" (ESC | ~("'"|"\n"|"\r"|"\\")) "'"

// End of file
EOF            ::= "<end of file>"


