// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

interfaceIdentifier ::= qualifiedIdentifier {COMMA qualifiedIdentifier}

typeDeclaration ::= modifiers classTypeDeclaration

modifiers ::= { PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT }

classTypeDeclaration ::= classDeclaration | interfaceDeclaration

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS  qualifiedIdentifier]
                       [IMPLEMENTS interfaceIdentifier]
                       classBody

interfaceDeclaration ::= INTERFACE IDENTIFIER 
							[EXTENDS interfaceIdentifier]
							classBody 

classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | RETURN [expression] SEMI
            | TRY statement CATCH formalParameters statement
            | SEMI 
            | statementExpression SEMI

formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | BYTE | SHORT | DOUBLE | LONG 

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalCondExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | REM_ASSIGN
                           | SHIFT_RIGHT_ASSIGN | SHIFT_RIGHT_UNSIGN | SHIFT_RIGHT_UNSIGN_ASSIGN
                           | SHIFT_LEFT_ASSIGN | XOR_ASSIGN | OR_ASSIGN | ANDEQ) assignmentExpression]

conditionalCondExpression ::= conditionalAndExpression // level 10
                               {COND conditionalAndExpression}

conditionalAndExpression ::= equalityExpression // level 10
                               {(LAND | LOR) equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {(EQUAL | NEQUAL) relationalExpression}                   

relationalExpression ::= shiftExpression       // level 5
                           [(GT | LE | GTE | LT) shiftExpression
                           | INSTANCEOF referenceType]
                           
shiftExpression ::= additiveExpression       // level 4
                           {(SHIFT_LEFT | SHIFT_RIGHT) additiveExpression}
                          

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {( STAR | DIV | REM | AND | OR | XOR) unaryExpression }


unaryExpression ::= INC unaryExpression  // level 1
				  | PLUS unaryExpression
                  | MINUS unaryExpression
				  | UCOM unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression



postfixExpression ::= primary {selector} {DEC}



selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
          | TRUE        | FALSE        | NULL
